/-
Copyright (c) 2024 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/

import Mathlib.MeasureTheory.Integral.Bochner
import Mathlib.Analysis.SpecialFunctions.Gamma.Beta

/-!
# Lemmas to be PR'ed separately
-/

section PR10614

open MeasureTheory

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [CompleteSpace E]
  {Œ± Œπ : Type*} [MeasurableSpace Œ±] {Œº : Measure Œ±} [Countable Œπ]

lemma hasSum_integral_of_summable_norm {F : Œπ ‚Üí Œ± ‚Üí E}
    (hF_int : ‚àÄ  i : Œπ, Integrable (F i) Œº)
    (hF_sum' : Summable fun i ‚Ü¶ ‚à´ a, ‚ÄñF i a‚Äñ ‚àÇŒº) :
    HasSum (fun n ‚Ü¶ ‚à´ (a : Œ±), F n a ‚àÇŒº) (‚à´ (a : Œ±), (‚àë' (i : Œπ), F i a) ‚àÇŒº) := by
  suffices ‚àë' (i : Œπ), ‚à´‚Åª (a : Œ±), ‚Üë‚ÄñF i a‚Äñ‚Çä ‚àÇŒº ‚â† ‚ä§ by
    rw [integral_tsum (fun i ‚Ü¶ (hF_int i).aestronglyMeasurable) this]
    exact (hF_sum'.of_norm_bounded _ fun i ‚Ü¶ norm_integral_le_integral_norm _).hasSum
  have (i : Œπ) : ‚à´‚Åª (a : Œ±), (‚ÄñF i a‚Äñ‚Çä : ENNReal) ‚àÇŒº = ‚Üë‚Äñ(‚à´ a : Œ±, ‚ÄñF i a‚Äñ ‚àÇŒº)‚Äñ‚Çä := by
    rw [lintegral_coe_eq_integral _ (hF_int i).norm, ENNReal.coe_nnreal_eq, coe_nnnorm,
        Real.norm_of_nonneg (integral_nonneg (fun a ‚Ü¶ norm_nonneg (F i a)))]
    rfl
  rw [funext this, ‚Üê ENNReal.coe_tsum]
  ¬∑ apply ENNReal.coe_ne_top
  ¬∑ simp_rw [‚Üê NNReal.summable_coe, coe_nnnorm]
    exact hF_sum'.abs

end PR10614

section sign

/-- `SignType.sign` respects strictly monotone zero-preserving maps. -/
lemma StrictMono.sign_comp {Œ± Œ≤ : Type*} [LinearOrder Œ±] [Zero Œ±]
    [Zero Œ≤] [Preorder Œ≤] [DecidableRel ((¬∑ < ¬∑) : Œ≤ ‚Üí Œ≤ ‚Üí Prop)]
    {F: Type*} [FunLike F Œ± Œ≤] [ZeroHomClass F Œ± Œ≤] {f : F} (hf : StrictMono f) (a : Œ±) :
    SignType.sign (f a) = SignType.sign a := by
  simp_rw [sign_apply, ‚Üê map_zero f, hf.lt_iff_lt]

/-- Casting out of `SignType` respects composition with functions preserving `0, 1, -1`. -/
lemma SignType.comp_cast' {Œ± Œ≤ : Type*} [One Œ±] [One Œ≤] [Neg Œ±] [Neg Œ≤] [Zero Œ±] [Zero Œ≤]
    (f : Œ± ‚Üí Œ≤) (h‚ÇÅ : f 1 = 1) (h‚ÇÇ : f 0 = 0) (h‚ÇÉ : f (-1) = -1) (s : SignType) :
    f s = s := by
  cases s <;> simp only [SignType.cast, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ]

/-- Casting out of `SignType` respects composition with suitable bundled homomorphism types. -/
lemma SignType.comp_cast {Œ± Œ≤ : Type*} {F: Type*} (f : F) (s : SignType) [FunLike F Œ± Œ≤] [One Œ≤]
    [AddGroupWithOne Œ±] [SubtractionMonoid Œ≤] [AddMonoidHomClass F Œ± Œ≤] [OneHomClass F Œ± Œ≤] :
    f s = s :=
  SignType.comp_cast' _ (by simp) (by simp) (by simp) s

lemma SignType.coe_neg {Œ± : Type*} [One Œ±] [SubtractionMonoid Œ±] (s : SignType) :
    (‚Üë(-s) : Œ±) = -‚Üës := by
  cases s <;> simp

-- /-- The cast from `SignType` to any ring factors through `Int`. Useful to avoid duplicating
-- API. -/
-- lemma sign_eq_cast_int (Œ± : Type*) [NonAssocRing Œ±] (s : SignType) :
--     (s : Œ±) = ((s : ‚Ñ§) : Œ±) := by
--   simp only [‚Üê SignType.comp_cast (Int.castRingHom Œ±), eq_intCast]

-- lemma Complex.ofReal_sign (x : SignType) : ((x : ‚Ñù) : ‚ÑÇ) = (x : ‚ÑÇ) := by
--   simp only [‚Üê SignType.comp_cast ofReal, ofReal_eq_coe]

end sign
-- section PR10883

-- namespace Real

-- @[simp]
-- lemma sign_eq_cast_sign (x : ‚Ñù) : sign x = ‚Üë(SignType.sign x) := by
--   rcases lt_trichotomy x 0 with h | h | h <;>
--   simp [h, sign_of_pos, sign_of_neg]

-- lemma sign_mul_abs (x : ‚Ñù) : sign x * |x| = x := by
--   rw [sign_eq_cast_sign, _root_.sign_mul_abs]

-- end Real

-- end PR10883

section tsum_stuff

open Real Asymptotics Topology Filter

lemma Int.negSucc_injective : Function.Injective Int.negSucc := fun _ _  h ‚Ü¶ Int.negSucc_inj.mp h

open Finset BigOperators in
/-- Variant of `HasSum.sum_nat_of_sum_int` directly using the two constructors of `‚Ñ§`. Note
we do not need `[ContinuousAdd Œ±]` for this. -/
theorem HasSum.sum_nat_of_sum_int' {Œ± : Type*} [AddCommMonoid Œ±] [TopologicalSpace Œ±]
    {a : Œ±} {f : ‚Ñ§ ‚Üí Œ±} (hf : HasSum f a) :
    HasSum (fun n : ‚Ñï ‚Ü¶ f n + f (Int.negSucc n)) a := by
  refine hf.hasSum_of_sum_eq fun u ‚Ü¶ ?_
  refine ‚ü®u.preimage _ (Nat.cast_injective.injOn _) ‚à™ u.preimage _ (Int.negSucc_injective.injOn _),
      fun v' hv' ‚Ü¶ ‚ü®v'.image (‚Üë) ‚à™ v'.image Int.negSucc, fun x hx ‚Ü¶ ?_, ?_‚ü©‚ü©
  ¬∑ simp only [mem_union, mem_image]
    cases' x with y y
    ¬∑ exact Or.inl ‚ü®y, hv' (by simpa only [mem_union, mem_preimage] using Or.inl hx), rfl‚ü©
    ¬∑ exact Or.inr ‚ü®y, hv' (by simpa only [mem_union, mem_preimage] using Or.inr hx), rfl‚ü©
  ¬∑ simp [sum_image (Nat.cast_injective.injOn _), sum_image (Int.negSucc_injective.injOn _),
      sum_add_distrib, sum_union, disjoint_iff_ne]

lemma summable_int_iff_summable_nat {Œ± : Type*}
    [AddCommGroup Œ±] [UniformSpace Œ±] [UniformAddGroup Œ±] [CompleteSpace Œ±] {f : ‚Ñ§ ‚Üí Œ±} :
    Summable f ‚Üî (Summable fun (n : ‚Ñï) => f ‚Üën) ‚àß (Summable fun (n : ‚Ñï) => f (-‚Üën)) := by
  refine ‚ü®fun p ‚Ü¶ ‚ü®?_, ?_‚ü©, fun p ‚Ü¶ summable_int_of_summable_nat p.1 p.2‚ü© <;>
    apply p.comp_injective
  exacts [Nat.cast_injective, neg_injective.comp Nat.cast_injective]

lemma Real.summable_pow_mul_exp_neg_nat_mul (k : ‚Ñï) {r : ‚Ñù} (hr : 0 < r) :
    Summable fun n : ‚Ñï ‚Ü¶ n ^ k * Real.exp (-r * n) := by
  simp_rw [mul_comm (-r), Real.exp_nat_mul]
  apply summable_pow_mul_geometric_of_norm_lt_one
  rwa [norm_of_nonneg (exp_nonneg _), exp_lt_one_iff, neg_lt_zero]

lemma summable_one_div_nat_add_rpow (a : ‚Ñù) (s : ‚Ñù) :
    Summable (fun n : ‚Ñï ‚Ü¶ 1 / |n + a| ^ s) ‚Üî 1 < s := by
  suffices ‚àÄ (b c : ‚Ñù), Summable (fun n : ‚Ñï ‚Ü¶ 1 / |n + b| ^ s) ‚Üí
      Summable (fun n : ‚Ñï ‚Ü¶ 1 / |n + c| ^ s) by
    simp_rw [‚Üê summable_one_div_nat_rpow, Iff.intro (this a 0) (this 0 a), add_zero, Nat.abs_cast]
  refine fun b c h ‚Ü¶ summable_of_isBigO_nat h (isBigO_of_div_tendsto_nhds ?_ 1 ?_)
  ¬∑ filter_upwards [eventually_gt_atTop (Nat.ceil |b|)] with n hn hx
    have hna : 0 < n + b := by linarith [lt_of_abs_lt ((abs_neg b).symm ‚ñ∏ Nat.lt_of_ceil_lt hn)]
    exfalso
    revert hx
    positivity
  ¬∑ simp_rw [Pi.div_def, div_div, mul_one_div, one_div_div]
    refine (?_ : Tendsto (fun x : ‚Ñù ‚Ü¶ |x + b| ^ s / |x + c| ^ s) atTop (ùìù 1)).comp
      tendsto_nat_cast_atTop_atTop
    have : Tendsto (fun x : ‚Ñù ‚Ü¶ 1 + (b - c) / x) atTop (ùìù 1) := by
      simpa using tendsto_const_nhds.add ((tendsto_const_nhds (X := ‚Ñù)).div_atTop tendsto_id)
    have : Tendsto (fun x ‚Ü¶ (x + b) / (x + c)) atTop (ùìù 1) := by
      refine (this.comp (tendsto_id.atTop_add (tendsto_const_nhds (x := c)))).congr' ?_
      filter_upwards [eventually_gt_atTop (-c)] with x hx
      field_simp [(by linarith : 0 < x + c).ne']
    apply (one_rpow s ‚ñ∏ (continuousAt_rpow_const _ s (by simp)).tendsto.comp this).congr'
    filter_upwards [eventually_gt_atTop (-b), eventually_gt_atTop (-c)] with x hb hc
    rw [neg_lt_iff_pos_add] at hb hc
    rw [Function.comp_apply, div_rpow hb.le hc.le, abs_of_pos hb, abs_of_pos hc]

lemma summable_one_div_int_add_rpow (a : ‚Ñù) (s : ‚Ñù) :
    Summable (fun n : ‚Ñ§ ‚Ü¶ 1 / |n + a| ^ s) ‚Üî 1 < s := by
  simp_rw [summable_int_iff_summable_nat, ‚Üê abs_neg (‚Üë(-_ : ‚Ñ§) + a), neg_add, Int.cast_neg,
    neg_neg, Int.cast_ofNat, summable_one_div_nat_add_rpow, and_self]

end tsum_stuff

section CLM_norm

@[to_additive]
lemma Nontrivial.exists_ne_one (Œ± : Type*) [One Œ±] [Nontrivial Œ±] :
    ‚àÉ x : Œ±, x ‚â† 1 := by
  obtain ‚ü®x, y, h‚ü© : ‚àÉ (x y : Œ±), x ‚â† y := Nontrivial.exists_pair_ne
  rcases eq_or_ne y 1 with rfl | h
  ¬∑ exact ‚ü®x, h‚ü©
  ¬∑ exact ‚ü®y, h‚ü©

/-- The operator norm of the first projection `E √ó F ‚Üí E` is at most 1. (It is 0 if `E` is zero, so
the inequality cannot be improved without further assumptions.) -/
lemma ContinuousLinearMap.norm_fst_le
    {ùïú : Type*} [NontriviallyNormedField ùïú] (E F : Type*)
    [SeminormedAddCommGroup E] [NormedSpace ùïú E] [SeminormedAddCommGroup F] [NormedSpace ùïú F] :
    ‚ÄñContinuousLinearMap.fst ùïú E F‚Äñ ‚â§ 1 := by
  refine ContinuousLinearMap.opNorm_le_bound _ zero_le_one (fun ‚ü®e, f‚ü© ‚Ü¶ ?_)
  simpa only [one_mul] using le_max_left ‚Äñe‚Äñ ‚Äñf‚Äñ

/-- The operator norm of the first projection `E √ó F ‚Üí E` is exactly 1 if `E` is nontrivial. -/
lemma ContinuousLinearMap.norm_fst_eq
    {ùïú : Type*} [NontriviallyNormedField ùïú] (E F : Type*) [Nontrivial E]
    [NormedAddCommGroup E] [NormedSpace ùïú E] [SeminormedAddCommGroup F] [NormedSpace ùïú F] :
    ‚ÄñContinuousLinearMap.fst ùïú E F‚Äñ = 1 := by
  refine le_antisymm (ContinuousLinearMap.norm_fst_le E F) ?_
  obtain ‚ü®e, he‚ü© := Nontrivial.exists_ne_zero E
  have : ‚Äñe‚Äñ ‚â§ _ * max ‚Äñe‚Äñ ‚Äñ0‚Äñ := (ContinuousLinearMap.fst ùïú E F).le_opNorm (e, 0)
  rw [norm_zero, max_eq_left (norm_nonneg e)] at this
  rwa [‚Üê mul_le_mul_iff_of_pos_right (norm_pos_iff.mpr he), one_mul]

/-- The operator norm of the second projection `E √ó F ‚Üí F` is exactly 1 if `F` is nontrivial. -/
lemma ContinuousLinearMap.norm_snd_le
    {ùïú : Type*} [NontriviallyNormedField ùïú] (E F : Type*)
    [SeminormedAddCommGroup E] [NormedSpace ùïú E] [SeminormedAddCommGroup F] [NormedSpace ùïú F] :
    ‚ÄñContinuousLinearMap.snd ùïú E F‚Äñ ‚â§ 1 := by
  refine ContinuousLinearMap.opNorm_le_bound _ zero_le_one (fun ‚ü®e, f‚ü© ‚Ü¶ ?_)
  simpa only [one_mul] using le_max_right ‚Äñe‚Äñ ‚Äñf‚Äñ

/-- The operator norm of the second projection `E √ó F ‚Üí F` is exactly 1 if `F` is nontrivial. -/
lemma ContinuousLinearMap.norm_snd_eq
    {ùïú : Type*} [NontriviallyNormedField ùïú] (E F : Type*) [Nontrivial F]
    [SeminormedAddCommGroup E] [NormedSpace ùïú E] [NormedAddCommGroup F] [NormedSpace ùïú F] :
    ‚ÄñContinuousLinearMap.snd ùïú E F‚Äñ = 1 := by
  refine le_antisymm (ContinuousLinearMap.norm_snd_le E F) ?_
  obtain ‚ü®f, hf‚ü© := Nontrivial.exists_ne_zero F
  have : ‚Äñf‚Äñ ‚â§ _ * max ‚Äñ0‚Äñ ‚Äñf‚Äñ := (ContinuousLinearMap.snd ùïú E F).le_opNorm (0, f)
  rw [norm_zero, max_eq_right (norm_nonneg f)] at this
  rwa [‚Üê mul_le_mul_iff_of_pos_right (norm_pos_iff.mpr hf), one_mul]

end CLM_norm

section Gamma‚Ñù

open Filter Topology Asymptotics Real Set MeasureTheory
open Complex hiding abs_of_nonneg

/-- Deligne's archimedean Gamma factor for a real infinite place, see
"Valeurs de fonctions L et periodes d'integrales" ¬ß 5.3. -/
noncomputable def Gamma‚Ñù (s : ‚ÑÇ) := œÄ ^ (-s / 2) * Complex.Gamma (s / 2)

/-- Deligne's archimedean Gamma factor for a complex infinite place, see
"Valeurs de fonctions L et periodes d'integrales" ¬ß 5.3. (Some authors omit the factor of 2). -/
noncomputable def Gamma‚ÑÇ (s : ‚ÑÇ) := 2 * (2 * œÄ) ^ (-s) * Complex.Gamma s

@[simp] lemma Gamma‚Ñù_def (s : ‚ÑÇ) : Gamma‚Ñù s = œÄ ^ (-s / 2) * Complex.Gamma (s / 2) := rfl

@[simp] lemma Gamma‚ÑÇ_def (s : ‚ÑÇ) : Gamma‚ÑÇ s = 2 * (2 * œÄ) ^ (-s) * Complex.Gamma s := rfl

lemma Gamma‚Ñù_add_two {s : ‚ÑÇ} (hs : s ‚â† 0) : Gamma‚Ñù (s + 2) = Gamma‚Ñù s * s / 2 / œÄ := by
  rw [Gamma‚Ñù, neg_div, add_div, neg_add, div_self two_ne_zero,
    Complex.Gamma_add_one _ (div_ne_zero hs two_ne_zero),
    cpow_add _ _ (ofReal_ne_zero.mpr pi_ne_zero), cpow_neg_one, Gamma‚Ñù]
  field_simp [pi_ne_zero]
  ring

lemma Gamma‚ÑÇ_add_one {s : ‚ÑÇ} (hs : s ‚â† 0) : Gamma‚ÑÇ (s + 1) = Gamma‚ÑÇ s * s / 2 / œÄ := by
  rw [Gamma‚ÑÇ, Complex.Gamma_add_one _ hs, neg_add, cpow_add _ _ (mul_ne_zero two_ne_zero
    (ofReal_ne_zero.mpr pi_ne_zero)), cpow_neg_one]
  field_simp [pi_ne_zero]
  ring

/-- Reformulation of the doubling formula (expressing compatibility of Deligne's Gamma factors
with base extensions at `‚àû`). -/
lemma Gamma‚Ñù_mul_Gamma‚Ñù_add_one (s : ‚ÑÇ) : Gamma‚Ñù s * Gamma‚Ñù (s + 1) = Gamma‚ÑÇ s := by
  simp only [Gamma‚Ñù_def, Gamma‚ÑÇ_def]
  calc
  _ = (œÄ ^ (-s / 2) * œÄ ^ (-(s + 1) / 2)) * (Gamma (s / 2) * Gamma (s / 2 + 1 / 2)) := by ring_nf
  _ = 2 ^ (1 - s) * (œÄ ^ (-1 / 2 - s) * œÄ ^ (1 / 2 : ‚ÑÇ)) * Gamma s := by
    rw [‚Üê cpow_add _ _ (ofReal_ne_zero.mpr pi_ne_zero), Complex.Gamma_mul_Gamma_add_half,
      sqrt_eq_rpow, ofReal_cpow pi_pos.le, ofReal_div, ofReal_one, ofReal_ofNat]
    ring_nf
  _ = 2 * ((2 : ‚Ñù) ^ (-s) * œÄ ^ (-s)) * Gamma s := by
    rw [sub_eq_add_neg, cpow_add _ _ two_ne_zero, cpow_one,
      ‚Üê cpow_add _ _ (ofReal_ne_zero.mpr pi_ne_zero), ofReal_ofNat]
    ring_nf
  _ = 2 * (2 * œÄ) ^ (-s) * Gamma s := by
    rw [‚Üê mul_cpow_ofReal_nonneg two_pos.le pi_pos.le, ofReal_ofNat]

/-- Reformulation of the reflection formula (expressing compatibility of Deligne Gamma factors
with Tate duality). -/
lemma Gamma‚Ñù_one_sub_mul_Gamma‚Ñù_one_add (s : ‚ÑÇ) :
    Gamma‚Ñù (1 - s) * Gamma‚Ñù (1 + s) = (cos (œÄ * s / 2))‚Åª¬π :=
  calc Gamma‚Ñù (1 - s) * Gamma‚Ñù (1 + s)
  _ = (œÄ ^ ((s - 1) / 2) * œÄ ^ ((-1 - s) / 2)) *
        (Gamma ((1 - s) / 2) * Gamma (1 - (1 - s) / 2)) := by
    simp only [Gamma‚Ñù_def]
    ring_nf
  _ = (œÄ ^ ((s - 1) / 2) * œÄ ^ ((-1 - s) / 2) * œÄ ^ (1 : ‚ÑÇ)) / sin (œÄ / 2 - œÄ * s / 2) := by
    rw [Complex.Gamma_mul_Gamma_one_sub, cpow_one]
    ring_nf
  _ = _ := by
    simp_rw [‚Üê Complex.cpow_add _ _ (ofReal_ne_zero.mpr pi_ne_zero),
      Complex.sin_pi_div_two_sub]
    ring_nf
    rw [cpow_zero, one_mul]

lemma Gamma‚Ñù_ne_zero_of_re_pos {s : ‚ÑÇ} (hs : 0 < re s) : Gamma‚Ñù s ‚â† 0 := by
  apply mul_ne_zero
  ¬∑ simp [pi_ne_zero]
  ¬∑ apply Complex.Gamma_ne_zero_of_re_pos
    rw [div_ofNat_re]
    exact div_pos hs two_pos

lemma Gamma‚Ñù_eq_zero_iff {s : ‚ÑÇ} : Gamma‚Ñù s = 0 ‚Üî ‚àÉ n : ‚Ñï, s = -(2 * n) := by
  simp [pi_ne_zero, div_eq_iff (two_ne_zero' ‚ÑÇ), mul_comm]

lemma Gamma‚Ñù_one : Gamma‚Ñù 1 = 1 := by
  rw [Gamma‚Ñù_def, Complex.Gamma_one_half_eq]
  simp [neg_div, cpow_neg, inv_mul_cancel, pi_ne_zero]

lemma Gamma‚ÑÇ_one : Gamma‚ÑÇ 1 = 1 / œÄ := by
  rw [Gamma‚ÑÇ_def, cpow_neg_one, Complex.Gamma_one]
  field_simp [pi_ne_zero]

/-- Reflection formula for `Gamma‚Ñù`. -/
lemma Gamma‚Ñù_div_Gamma‚Ñù_one_sub {s : ‚ÑÇ} (hs : ‚àÄ (n : ‚Ñï), s ‚â† -(2 * n + 1)) :
    Gamma‚Ñù s / Gamma‚Ñù (1 - s) = Gamma‚ÑÇ s * cos (œÄ * s / 2) := by
  have : Gamma‚Ñù (s + 1) ‚â† 0 := by
    simpa only [Ne.def, Gamma‚Ñù_eq_zero_iff, not_exists, ‚Üê eq_sub_iff_add_eq,
      sub_eq_add_neg, ‚Üê neg_add]
  calc Gamma‚Ñù s / Gamma‚Ñù (1 - s)
  _ = (Gamma‚Ñù s * Gamma‚Ñù (s + 1)) / (Gamma‚Ñù (1 - s) * Gamma‚Ñù (1 + s)) := by
    rw [add_comm 1 s, mul_comm (Gamma‚Ñù (1 - s)) (Gamma‚Ñù (s + 1)), ‚Üê div_div,
      mul_div_cancel _ this]
  _ = (2 * (2 * œÄ) ^ (-s) * Gamma s) / ((cos (œÄ * s / 2))‚Åª¬π) := by
    rw [Gamma‚Ñù_one_sub_mul_Gamma‚Ñù_one_add, Gamma‚Ñù_mul_Gamma‚Ñù_add_one, Gamma‚ÑÇ_def]
  _ = _ := by rw [Gamma‚ÑÇ_def, div_eq_mul_inv, inv_inv]

/-- Reformulation of reflection formula which is logically weaker, but easier to use in
functional equations for un-completed zeta functions. (Even version) -/
lemma inv_Gamma‚Ñù_one_sub {s : ‚ÑÇ} (hs : ‚àÄ (n : ‚Ñï), s ‚â† -n) :
    (Gamma‚Ñù (1 - s))‚Åª¬π = Gamma‚ÑÇ s * cos (œÄ * s / 2) * (Gamma‚Ñù s)‚Åª¬π := by
  have h1 : Gamma‚Ñù s ‚â† 0 := by
    rw [Ne.def, Gamma‚Ñù_eq_zero_iff, not_exists]
    intro n h
    specialize hs (2 * n)
    simp_all
  have h2 : ‚àÄ (n : ‚Ñï), s ‚â† -(2 * ‚Üën + 1) := by
    intro n h
    specialize hs (2 * n + 1)
    simp_all
  rw [‚Üê Gamma‚Ñù_div_Gamma‚Ñù_one_sub h2, ‚Üê div_eq_mul_inv, div_right_comm, div_self h1, one_div]

/-- Reformulation of reflection formula which is logically weaker, but easier to use in
functional equations for un-completed zeta functions. (Odd version) -/
lemma inv_Gamma‚Ñù_two_sub {s : ‚ÑÇ} (hs : ‚àÄ (n : ‚Ñï), s ‚â† -n) :
    (Gamma‚Ñù (2 - s))‚Åª¬π = Gamma‚ÑÇ s * Complex.sin (‚ÜëœÄ * s / 2) * (Gamma‚Ñù (s + 1))‚Åª¬π := by
  by_cases h : s = 1
  ¬∑ rw [h, (by ring : 2 - 1 = (1 : ‚ÑÇ)), Gamma‚Ñù_one, Gamma‚Ñù,
    neg_div, (by norm_num : (1 + 1) / 2 = (1 : ‚ÑÇ)), Complex.Gamma_one, Gamma‚ÑÇ_one,
    mul_one, Complex.sin_pi_div_two, mul_one, cpow_neg_one, mul_one, inv_inv,
    div_mul_cancel _ (ofReal_ne_zero.mpr pi_ne_zero), inv_one]
  rw [‚Üê Ne.def, ‚Üê sub_ne_zero] at h
  have h' (n : ‚Ñï) : s - 1 ‚â† -n := by
    cases' n with m
    ¬∑ rwa [Nat.cast_zero, neg_zero]
    ¬∑ rw [Ne.def, sub_eq_iff_eq_add]
      convert hs m using 2
      push_cast
      ring
  rw [(by ring : 2 - s = 1 - (s - 1)), inv_Gamma‚Ñù_one_sub h',
    (by rw [sub_add_cancel] : Gamma‚ÑÇ s = Gamma‚ÑÇ (s - 1 + 1)), Gamma‚ÑÇ_add_one h,
    (by ring : s + 1 = (s - 1) + 2), Gamma‚Ñù_add_two h, mul_sub, sub_div, mul_one,
      Complex.cos_sub_pi_div_two]
  simp_rw [mul_div_assoc, mul_inv]
  generalize (Gamma‚Ñù (s - 1))‚Åª¬π = A
  field_simp [pi_ne_zero]
  ring

lemma differentiable_Gamma‚Ñù_inv : Differentiable ‚ÑÇ (fun s ‚Ü¶ (Gamma‚Ñù s)‚Åª¬π) := by
  conv => enter [2, s]; rw [Gamma‚Ñù, mul_inv]
  refine Differentiable.mul (fun s ‚Ü¶ .inv ?_ (by simp [pi_ne_zero])) ?_
  ¬∑ refine ((differentiableAt_id.neg.div_const (2 : ‚ÑÇ)).const_cpow ?_)
    exact Or.inl (ofReal_ne_zero.mpr pi_ne_zero)
  ¬∑ exact differentiable_one_div_Gamma.comp (differentiable_id.div_const _)

lemma Gamma‚Ñù_residue_zero : Tendsto (fun s ‚Ü¶ s * Gamma‚Ñù s) (ùìù[‚â†] 0) (ùìù 2) := by
  have h : Tendsto (fun z : ‚ÑÇ ‚Ü¶ z / 2 * Gamma (z / 2)) (ùìù[‚â†] 0) (ùìù 1) := by
    refine tendsto_self_mul_Gamma_nhds_zero.comp ?_
    rw [tendsto_nhdsWithin_iff, (by simp : ùìù (0 : ‚ÑÇ) = ùìù (0 / 2))]
    exact ‚ü®(tendsto_id.div_const _).mono_left nhdsWithin_le_nhds,
      eventually_of_mem self_mem_nhdsWithin fun x hx ‚Ü¶ div_ne_zero hx two_ne_zero‚ü©
  have h' : Tendsto (fun s : ‚ÑÇ ‚Ü¶ 2 * (œÄ : ‚ÑÇ) ^ (-s / 2)) (ùìù[‚â†] 0) (ùìù 2) := by
    rw [(by simp : ùìù 2 = ùìù (2 * (œÄ : ‚ÑÇ) ^ (-(0 : ‚ÑÇ) / 2)))]
    refine Tendsto.mono_left (ContinuousAt.tendsto ?_) nhdsWithin_le_nhds
    exact continuousAt_const.mul ((continuousAt_const_cpow (ofReal_ne_zero.mpr pi_ne_zero)).comp
      (continuousAt_id.neg.div_const _))
  convert mul_one (2 : ‚ÑÇ) ‚ñ∏ (h'.mul h) using 2 with z
  rw [Gamma‚Ñù]
  ring_nf

end Gamma‚Ñù
