/-
Copyright (c) 2023 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/
import Mathlib.Analysis.SpecialFunctions.Gamma.Beta
import Mathlib.NumberTheory.ZetaFunctions.HurwitzZetaEven
import Mathlib.NumberTheory.ZetaValues
import Mathlib.Analysis.Complex.RemovableSingularity

#align_import number_theory.zeta_function from "leanprover-community/mathlib"@"57f9349f2fe19d2de7207e99b0341808d977cdcf"

/-!
# Definition of the Riemann zeta function

## Main definitions:

* `riemannZeta`: the Riemann zeta function `Œ∂ : ‚ÑÇ ‚Üí ‚ÑÇ`.
* `completedRiemannZeta`: the completed zeta function `Œõ : ‚ÑÇ ‚Üí ‚ÑÇ`, which satisfies
  `Œõ(s) = œÄ ^ (-s / 2) Œì(s / 2) Œ∂(s)` (away from the poles of `Œì(s / 2)`).
* `completedRiemannZeta‚ÇÄ`: the entire function `Œõ‚ÇÄ` satisfying
  `Œõ‚ÇÄ(s) = Œõ(s) + 1 / (s - 1) - 1 / s` wherever the RHS is defined.

Note that mathematically `Œ∂(s)` is undefined at `s = 1`, while `Œõ(s)` is undefined at both `s = 0`
and `s = 1`. Our construction assigns some values at these points (which are not arbitrary, but
I haven't checked exactly what they are).

## Main results:

* `differentiable_completedZeta‚ÇÄ` : the function `Œõ‚ÇÄ(s)` is entire.
* `differentiableAt_completedZeta` : the function `Œõ(s)` is differentiable away from `s = 0` and
  `s = 1`.
* `differentiableAt_riemannZeta` : the function `Œ∂(s)` is differentiable away from `s = 1`.
* `zeta_eq_tsum_one_div_nat_add_one_cpow` : for `1 < re s`, we have
  `Œ∂(s) = ‚àë' (n : ‚Ñï), 1 / (n + 1) ^ s`.
* `completedRiemannZeta‚ÇÄ_one_sub`, `completedRiemannZeta_one_sub`, and `riemannZeta_one_sub` :
  functional equation relating values at `s` and `1 - s`
* `riemannZeta_neg_nat_eq_bernoulli` : for any `k ‚àà ‚Ñï` we have the formula
  `riemannZeta (-k) = (-1) ^ k * bernoulli (k + 1) / (k + 1)`
* `riemannZeta_two_mul_nat`: formula for `Œ∂(2 * k)` for `k ‚àà ‚Ñï, k ‚â† 0` in terms of Bernoulli
  numbers

## Outline of proofs:

These results are mostly special cases of more general results for Hurwitz zeta functions proved
in `Mathlib.NumberTheory.ZetaFunctions.HurwitzZetaEven`.
-/


open MeasureTheory Set Filter Asymptotics TopologicalSpace Real Asymptotics Classical

open Complex hiding exp norm_eq_abs abs_of_nonneg abs_two continuous_exp

open scoped Topology Real Nat

noncomputable section

/-!
## Definition of the completed Riemann zeta
-/

/-- The completed Riemann zeta function with its poles removed, `Œõ(s) + 1 / s - 1 / (s - 1)`. -/
def completedRiemannZeta‚ÇÄ (s : ‚ÑÇ) : ‚ÑÇ := completedHurwitzZetaEven‚ÇÄ 0 s
#align riemann_completed_zeta‚ÇÄ completedRiemannZeta‚ÇÄ

/-- The completed Riemann zeta function, `Œõ(s)`, which satisfies
`Œõ(s) = œÄ ^ (-s / 2) Œì(s / 2) Œ∂(s)` (up to a minor correction at `s = 0`). -/
def completedRiemannZeta (s : ‚ÑÇ) : ‚ÑÇ := completedHurwitzZetaEven 0 s
#align riemann_completed_zeta completedRiemannZeta

lemma completedHurwitzZetaEven_zero (s : ‚ÑÇ) :
    completedHurwitzZetaEven 0 s = completedRiemannZeta s := by rfl

lemma completedHurwitzZetaEven‚ÇÄ_zero (s : ‚ÑÇ) :
    completedHurwitzZetaEven‚ÇÄ 0 s = completedRiemannZeta‚ÇÄ s := by rfl

lemma completedCosZeta_zero (s : ‚ÑÇ) :
    completedCosZeta 0 s = completedRiemannZeta s := by
  rw [completedRiemannZeta, completedHurwitzZetaEven, completedCosZeta, hurwitzEvenFEPair_zero_symm]

lemma completedCosZeta‚ÇÄ_zero (s : ‚ÑÇ) :
    completedCosZeta‚ÇÄ 0 s = completedRiemannZeta‚ÇÄ s := by
  rw [completedRiemannZeta‚ÇÄ,
    completedHurwitzZetaEven‚ÇÄ, completedCosZeta‚ÇÄ, hurwitzEvenFEPair_zero_symm]

lemma completedRiemannZeta_eq (s : ‚ÑÇ) :
    completedRiemannZeta s = completedRiemannZeta‚ÇÄ s - 1 / s - 1 / (1 - s) := by
  simp_rw [completedRiemannZeta, completedRiemannZeta‚ÇÄ, completedHurwitzZetaEven_eq, if_true]

/-- The modified completed Riemann zeta function `Œõ(s) + 1 / s + 1 / (1 - s)` is entire. -/
theorem differentiable_completedZeta‚ÇÄ : Differentiable ‚ÑÇ completedRiemannZeta‚ÇÄ :=
  differentiable_completedHurwitzZetaEven‚ÇÄ 0
#align differentiable_completed_zeta‚ÇÄ differentiable_completedZeta‚ÇÄ

/-- The completed Riemann zeta function `Œõ(s)` is differentiable away from `s = 0` and `s = 1`. -/
theorem differentiableAt_completedZeta {s : ‚ÑÇ} (hs : s ‚â† 0) (hs' : s ‚â† 1) :
    DifferentiableAt ‚ÑÇ completedRiemannZeta s :=
  differentiableAt_completedHurwitzZetaEven 0 (Or.inl hs) hs'

/-- Riemann zeta functional equation, formulated for `Œõ‚ÇÄ`: for any complex `s` we have
`Œõ‚ÇÄ(1 - s) = Œõ‚ÇÄ s`. -/
theorem completedRiemannZeta‚ÇÄ_one_sub (s : ‚ÑÇ) :
    completedRiemannZeta‚ÇÄ (1 - s) = completedRiemannZeta‚ÇÄ s := by
  rw [‚Üê completedHurwitzZetaEven‚ÇÄ_zero, ‚Üê completedCosZeta‚ÇÄ_zero, completedHurwitzZetaEven‚ÇÄ_one_sub]
#align riemann_completed_zeta‚ÇÄ_one_sub completedRiemannZeta‚ÇÄ_one_sub

/-- Riemann zeta functional equation, formulated for `Œõ`: for any complex `s` we have
`Œõ (1 - s) = Œõ s`. -/
theorem completedRiemannZeta_one_sub (s : ‚ÑÇ) :
    completedRiemannZeta (1 - s) = completedRiemannZeta s := by
  rw [‚Üê completedHurwitzZetaEven_zero, ‚Üê completedCosZeta_zero, completedHurwitzZetaEven_one_sub]
#align riemann_completed_zeta_one_sub completedRiemannZeta_one_sub

/-- The residue of `Œõ(s)` at `s = 1` is equal to `1`. -/
lemma completedRiemannZeta_residue_one :
    Tendsto (fun s ‚Ü¶ (s - 1) * completedRiemannZeta s) (ùìù[‚â†] 1) (ùìù 1) :=
  completedHurwitzZetaEven_residue_one 0

/-!
## The un-completed Riemann zeta function
-/

/-- The Riemann zeta function `Œ∂(s)`. -/
def riemannZeta := hurwitzZetaEven 0
#align riemann_zeta riemannZeta

lemma hurwitzZetaEven_zero : hurwitzZetaEven 0 = riemannZeta := rfl

lemma cosZeta_zero : cosZeta 0 = riemannZeta := by
  simp_rw [cosZeta, riemannZeta, hurwitzZetaEven, if_true, completedHurwitzZetaEven_zero,
    completedCosZeta_zero]

/-- The Riemann zeta function is differentiable away from `s = 1`. -/
theorem differentiableAt_riemannZeta {s : ‚ÑÇ} (hs' : s ‚â† 1) : DifferentiableAt ‚ÑÇ riemannZeta s :=
  differentiableAt_hurwitzZetaEven _ hs'
#align differentiable_at_riemann_zeta differentiableAt_riemannZeta

/-- We have `Œ∂(0) = -1 / 2`. -/
theorem riemannZeta_zero : riemannZeta 0 = -1 / 2 := by
  simp_rw [riemannZeta, hurwitzZetaEven, Function.update_same, if_true]
#align riemann_zeta_zero riemannZeta_zero

lemma riemannZeta_def_of_ne_zero {s : ‚ÑÇ} (hs : s ‚â† 0) :
    riemannZeta s = completedRiemannZeta s / Gamma‚Ñù s := by
  rw [riemannZeta, hurwitzZetaEven, Function.update_noteq hs, completedHurwitzZetaEven_zero]

/-- The trivial zeroes of the zeta function. -/
theorem riemannZeta_neg_two_mul_nat_add_one (n : ‚Ñï) : riemannZeta (-2 * (n + 1)) = 0 :=
  hurwitzZetaEven_neg_two_mul_nat_add_one 0 n
#align riemann_zeta_neg_two_mul_nat_add_one riemannZeta_neg_two_mul_nat_add_one

/-- Riemann zeta functional equation, formulated for `Œ∂`: if `1 - s ‚àâ ‚Ñï`, then we have
`Œ∂ (1 - s) = 2 ^ (1 - s) * œÄ ^ (-s) * Œì s * sin (œÄ * (1 - s) / 2) * Œ∂ s`. -/
theorem riemannZeta_one_sub {s : ‚ÑÇ} (hs : ‚àÄ n : ‚Ñï, s ‚â† -n) (hs' : s ‚â† 1) :
    riemannZeta (1 - s) = 2 * (2 * œÄ) ^ (-s) * Gamma s * cos (œÄ * s / 2) * riemannZeta s := by
  rw [riemannZeta, hurwitzZetaEven_one_sub 0 hs (Or.inr hs'), cosZeta_zero, hurwitzZetaEven_zero]
#align riemann_zeta_one_sub riemannZeta_one_sub

/-- A formal statement of the **Riemann hypothesis** ‚Äì constructing a term of this type is worth a
million dollars. -/
def RiemannHypothesis : Prop :=
  ‚àÄ (s : ‚ÑÇ) (_ : riemannZeta s = 0) (_ : ¬¨‚àÉ n : ‚Ñï, s = -2 * (n + 1)) (_ : s ‚â† 1), s.re = 1 / 2
#align riemann_hypothesis RiemannHypothesis

/-!
##¬†Relating the Mellin transform to the Dirichlet series
-/

theorem completedZeta_eq_tsum_of_one_lt_re {s : ‚ÑÇ} (hs : 1 < re s) :
    completedRiemannZeta s = (œÄ : ‚ÑÇ) ^ (-s / 2) * Gamma (s / 2) *
    ‚àë' n : ‚Ñï, 1 / (n : ‚ÑÇ) ^ s := by
  convert (hasSum_nat_completedCosZeta 0 hs).tsum_eq.symm
  ¬∑ ext1 x
    rw [QuotientAddGroup.mk_zero, completedCosZeta_zero]
  ¬∑ have : s ‚â† 0 := fun h ‚Ü¶ (not_lt.mpr zero_le_one) (zero_re ‚ñ∏ h ‚ñ∏ hs)
    simp_rw [‚Üê tsum_mul_left, mul_zero, zero_mul, Real.cos_zero, ofReal_one, mul_one,
      mul_one_div]
    congr 1 with n
    split_ifs with h <;>
    simp only [Gamma‚Ñù_def, h, Nat.cast_zero, zero_cpow this, div_zero]
#align completed_zeta_eq_tsum_of_one_lt_re completedZeta_eq_tsum_of_one_lt_re

/-- The Riemann zeta function agrees with the naive Dirichlet-series definition when the latter
converges. (Note that this is false without the assumption: when `re s ‚â§ 1` the sum is divergent,
and we use a different definition to obtain the analytic continuation to all `s`.) -/
theorem zeta_eq_tsum_one_div_nat_cpow {s : ‚ÑÇ} (hs : 1 < re s) :
    riemannZeta s = ‚àë' n : ‚Ñï, 1 / (n : ‚ÑÇ) ^ s := by
  convert (hasSum_nat_cosZeta 0 hs).tsum_eq.symm using 3 with n
  ¬∑ rw [QuotientAddGroup.mk_zero, cosZeta_zero]
  ¬∑ simp_rw [mul_zero, zero_mul, Real.cos_zero, ofReal_one]
#align zeta_eq_tsum_one_div_nat_cpow zeta_eq_tsum_one_div_nat_cpow

/-- Alternate formulation of `zeta_eq_tsum_one_div_nat_cpow` with a `+ 1` (to avoid relying
on mathlib's conventions for `0 ^ s`).  -/
theorem zeta_eq_tsum_one_div_nat_add_one_cpow {s : ‚ÑÇ} (hs : 1 < re s) :
    riemannZeta s = ‚àë' n : ‚Ñï, 1 / (n + 1 : ‚ÑÇ) ^ s := by
  have hs' : s ‚â† 0 := fun h ‚Ü¶ (not_lt.mpr zero_le_one) (zero_re ‚ñ∏ h ‚ñ∏ hs)
  have := zeta_eq_tsum_one_div_nat_cpow hs
  rw [tsum_eq_zero_add] at this
  ¬∑ simpa [Nat.cast_zero, zero_cpow hs', div_zero, zero_add, Nat.cast_add, Nat.cast_one]
  ¬∑ refine .of_norm ?_
    simp_rw [norm_div, norm_one, Complex.norm_eq_abs, ‚Üê ofReal_nat_cast,
      abs_cpow_eq_rpow_re_of_nonneg (Nat.cast_nonneg _) (zero_lt_one.trans hs).ne',
      summable_one_div_nat_rpow]
    assumption
#align zeta_eq_tsum_one_div_nat_add_one_cpow zeta_eq_tsum_one_div_nat_add_one_cpow

/-- Special case of `zeta_eq_tsum_one_div_nat_cpow` when the argument is in `‚Ñï`, so the power
function can be expressed using na√Øve `pow` rather than `cpow`. -/
theorem zeta_nat_eq_tsum_of_gt_one {k : ‚Ñï} (hk : 1 < k) :
    riemannZeta k = ‚àë' n : ‚Ñï, 1 / (n : ‚ÑÇ) ^ k := by
  simp only [zeta_eq_tsum_one_div_nat_cpow
      (by rwa [‚Üê ofReal_nat_cast, ofReal_re, ‚Üê Nat.cast_one, Nat.cast_lt] : 1 < re k),
    cpow_nat_cast]
#align zeta_nat_eq_tsum_of_gt_one zeta_nat_eq_tsum_of_gt_one

/-- The residue of `Œ∂(s)` at `s = 1` is equal to 1. -/
lemma riemannZeta_residue_one : Tendsto (fun s ‚Ü¶ (s - 1) * riemannZeta s) (ùìù[‚â†] 1) (ùìù 1) := by
  exact hurwitzZetaEven_residue_one 0
