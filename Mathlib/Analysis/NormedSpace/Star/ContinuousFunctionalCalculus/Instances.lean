import Mathlib.Analysis.NormedSpace.Star.ContinuousFunctionalCalculus.Restrict
import Mathlib.Analysis.NormedSpace.Star.Spectrum
import Mathlib.Analysis.NormedSpace.Star.ContinuousFunctionalCalculus

noncomputable section

section Normal

instance IsStarNormal.cfc_map {R A : Type*} {p : A ‚Üí Prop} [CommSemiring R] [StarRing R]
    [MetricSpace R] [TopologicalSemiring R] [ContinuousStar R] [TopologicalSpace A] [Ring A]
    [StarRing A] [Algebra R A] [ContinuousFunctionalCalculus R p] (a : A) (f : R ‚Üí R) :
    IsStarNormal (cfc a f) where
  star_comm_self := by
    rw [Commute, SemiconjBy]
    by_cases h : ContinuousOn f (spectrum R a)
    ¬∑ rw [‚Üê cfc_star, ‚Üê cfc_mul .., ‚Üê cfc_mul ..]
      congr! 2
      exact mul_comm _ _
    ¬∑ simp [cfc_apply_of_not' a h]

variable {A : Type*} [NormedRing A] [StarRing A] [CstarRing A] [CompleteSpace A]
variable [NormedAlgebra ‚ÑÇ A] [StarModule ‚ÑÇ A]

instance IsStarNormal.instContinuousFunctionalCalculus :
    ContinuousFunctionalCalculus ‚ÑÇ (IsStarNormal : A ‚Üí Prop) where
  toStarAlgHom {a} ha := (elementalStarAlgebra ‚ÑÇ a).subtype.comp <| continuousFunctionalCalculus a
  hom_closedEmbedding {a} ha := Isometry.closedEmbedding <|
    isometry_subtype_coe.comp <| StarAlgEquiv.isometry (continuousFunctionalCalculus a)
  hom_id {a} ha := congr_arg Subtype.val <| continuousFunctionalCalculus_map_id a
  hom_map_spectrum {a} ha f := by
    simp only [StarAlgHom.comp_apply, StarAlgHom.coe_coe, StarSubalgebra.coe_subtype]
    rw [‚Üê StarSubalgebra.spectrum_eq (elementalStarAlgebra.isClosed ‚ÑÇ a),
      AlgEquiv.spectrum_eq (continuousFunctionalCalculus a), ContinuousMap.spectrum_eq_range]
  predicate_hom {a} ha f := ‚ü®by rw [‚Üê map_star]; exact Commute.all (star f) f |>.map _‚ü©

lemma IsSelfAdjoint.spectrumRestricts {a : A} (ha : IsSelfAdjoint a) :
    SpectrumRestricts a Complex.reCLM where
  rightInvOn _x hx := ha.mem_spectrum_eq_re hx |>.symm
  left_inv := Complex.ofReal_re

/-- An element in a C‚ãÜ-algebra is selfadjoint if and only if it is normal and its spectrum is
contained in `‚Ñù`. -/
lemma isSelfAdjoint_iff_isStarNormal_and_spectrumRestricts {a : A} :
    IsSelfAdjoint a ‚Üî IsStarNormal a ‚àß SpectrumRestricts a Complex.reCLM := by
  refine ‚ü®fun ha ‚Ü¶ ‚ü®ha.isStarNormal, ha.spectrumRestricts‚ü©, ?_‚ü©
  rintro ‚ü®ha‚ÇÅ, ha‚ÇÇ‚ü©
  rw [isSelfAdjoint_iff]
  nth_rw 2 [‚Üê cfc_id ‚ÑÇ a]
  rw [‚Üê cfc_star_id a (R := ‚ÑÇ)]
  refine cfc_congr a fun x hx ‚Ü¶ ?_
  obtain ‚ü®x, -, rfl‚ü© := ha‚ÇÇ.algebraMap_image.symm ‚ñ∏ hx
  exact Complex.conj_ofReal _

instance IsSelfAdjoint.instContinuousFunctionalCalculus :
    ContinuousFunctionalCalculus ‚Ñù (IsSelfAdjoint : A ‚Üí Prop) :=
  SpectrumRestricts.cfc (q := IsStarNormal) (p := IsSelfAdjoint) Complex.reCLM
    Complex.isometry_ofReal (fun _ ‚Ü¶ isSelfAdjoint_iff_isStarNormal_and_spectrumRestricts)
    (fun _ _ ‚Ü¶ inferInstance)

lemma mem_unitary_of_spectrum_subset_circle {u : A} [IsStarNormal u]
    (hu : spectrum ‚ÑÇ u ‚äÜ circle) : u ‚àà unitary A := by
  rw [unitary.mem_iff, ‚Üê cfc_id ‚ÑÇ u, ‚Üê cfc_star, ‚Üê cfc_mul .., ‚Üê cfc_mul ..]
  simp only [id_eq]
  nontriviality A
  constructor
  all_goals
    apply eq_one_of_spectrum_eq_one (R := ‚ÑÇ) _ ?_
    rw [Set.eq_singleton_iff_nonempty_unique_mem]
    refine ‚ü®spectrum.nonempty _, ?_‚ü©
    rw [cfc_map_spectrum _ _]
    rintro - ‚ü®x, hx, rfl‚ü©
    simp only [ContinuousMap.mul_apply, ContinuousMap.star_apply, ContinuousMap.id_apply,
      IsROrC.star_def, mul_comm x]
    apply hu at hx
    rwa [SetLike.mem_coe, mem_circle_iff_normSq, ‚Üê Complex.ofReal_injective.eq_iff,
      Complex.normSq_eq_conj_mul_self] at hx

lemma unitary_iff_isStarNormal_and_spectrum_subset_circle {u : A} :
    u ‚àà unitary A ‚Üî IsStarNormal u ‚àß spectrum ‚ÑÇ u ‚äÜ circle := by
  refine ‚ü®fun hu ‚Ü¶ ?_, ?_‚ü©
  ¬∑ have := isStarNormal_of_mem_unitary hu
    exact ‚ü®this, spectrum.subset_circle_of_unitary hu‚ü©
  ¬∑ rintro ‚ü®_, hu‚ü©
    exact mem_unitary_of_spectrum_subset_circle hu

end Normal

section PrePositive

open NNReal ENNReal

def ContinuousMap.toNNReal : C(‚Ñù, ‚Ñù‚â•0) := .mk Real.toNNReal continuous_real_toNNReal

@[simp]
lemma ContinuousMap.coe_toNNReal : ‚áëContinuousMap.toNNReal = Real.toNNReal := rfl

-- MOVE ME
lemma spectrumRestricts_nnreal_iff {A : Type*} [Ring A] [Algebra ‚Ñù A] {a : A} :
    SpectrumRestricts a ContinuousMap.toNNReal ‚Üî ‚àÄ x ‚àà spectrum ‚Ñù a, 0 ‚â§ x := by
  refine ‚ü®fun h x hx ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®x, -, rfl‚ü© := h.algebraMap_image.symm ‚ñ∏ hx
    exact coe_nonneg x
  ¬∑ exact .of_subset_range_algebraMap _ _ (fun _ ‚Ü¶ Real.toNNReal_coe)
      fun x hx ‚Ü¶ ‚ü®‚ü®x, h x hx‚ü©, rfl‚ü©

-- MOVE ME
lemma spectrumRestricts_real_iff {A : Type*} [Ring A] [Algebra ‚ÑÇ A] {a : A} :
    SpectrumRestricts a Complex.reCLM ‚Üî ‚àÄ x ‚àà spectrum ‚ÑÇ a, x = x.re := by
  refine ‚ü®fun h x hx ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®x, -, rfl‚ü© := h.algebraMap_image.symm ‚ñ∏ hx
    simp
  ¬∑ exact .of_subset_range_algebraMap _ _ Complex.ofReal_re
      fun x hx ‚Ü¶ ‚ü®x.re, (h x hx).symm‚ü©

-- MOVE ME
lemma spectrumRestricts_nnreal_iff_spectralRadius_le {A : Type*} [Ring A] [Algebra ‚Ñù A]
    {a : A} {t : ‚Ñù‚â•0} (ht : spectralRadius ‚Ñù a ‚â§ t) :
    SpectrumRestricts a ContinuousMap.toNNReal ‚Üî spectralRadius ‚Ñù (algebraMap ‚Ñù A t - a) ‚â§ t := by
  have : spectrum ‚Ñù a ‚äÜ Set.Icc (-t) t := by
    intro x hx
    rw [Set.mem_Icc, ‚Üê abs_le, ‚Üê Real.norm_eq_abs, ‚Üê coe_nnnorm, NNReal.coe_le_coe,
      ‚Üê ENNReal.coe_le_coe]
    exact le_iSup‚ÇÇ (Œ± := ‚Ñù‚â•0‚àû) x hx |>.trans ht
  rw [spectrumRestricts_nnreal_iff]
  refine ‚ü®fun h ‚Ü¶ iSup‚ÇÇ_le fun x hx ‚Ü¶ ?_, fun h ‚Ü¶ ?_‚ü©
  ¬∑ rw [‚Üê spectrum.singleton_sub_eq] at hx
    obtain ‚ü®y, hy, rfl‚ü© : ‚àÉ y ‚àà spectrum ‚Ñù a, ‚Üët - y = x := by simpa using hx
    obtain ‚ü®hty, hyt‚ü© := Set.mem_Icc.mp <| this hy
    lift y to ‚Ñù‚â•0 using h y hy
    rw [‚Üê NNReal.coe_sub (by exact_mod_cast hyt)]
    simp
  ¬∑ replace h : ‚àÄ x ‚àà spectrum ‚Ñù a, ‚Äñt - x‚Äñ‚Çä ‚â§ t := by
      simpa [spectralRadius, iSup‚ÇÇ_le_iff, ‚Üê spectrum.singleton_sub_eq] using h
    peel h with x hx h_le
    rw [‚Üê NNReal.coe_le_coe, coe_nnnorm, Real.norm_eq_abs, abs_le] at h_le
    linarith [h_le.2]

-- MOVE ME
lemma SpectrumRestricts.spectralRadius_eq {ùïú‚ÇÅ ùïú‚ÇÇ A : Type*} [NormedField ùïú‚ÇÅ] [NormedField ùïú‚ÇÇ]
    [NormedRing A] [NormedAlgebra ùïú‚ÇÅ A] [NormedAlgebra ùïú‚ÇÇ A] [Algebra ùïú‚ÇÅ ùïú‚ÇÇ] [IsScalarTower ùïú‚ÇÅ ùïú‚ÇÇ A]
    {f : ùïú‚ÇÇ ‚Üí ùïú‚ÇÅ} (h_isom : Isometry (algebraMap ùïú‚ÇÅ ùïú‚ÇÇ)) {a : A} (h : SpectrumRestricts a f) :
    spectralRadius ùïú‚ÇÅ a = spectralRadius ùïú‚ÇÇ a := by
  rw [spectralRadius, spectralRadius]
  apply le_antisymm
  all_goals apply iSup‚ÇÇ_le fun x hx ‚Ü¶ ?_
  ¬∑ have := h_isom.nnnorm_map_of_map_zero (map_zero _) x
    refine (congr_arg ((‚Üë) : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0‚àû) this).symm.trans_le <| le_iSup‚ÇÇ (Œ± := ‚Ñù‚â•0‚àû) _ ?_
    exact (spectrum.algebraMap_mem_iff _).mpr hx
  ¬∑ have ‚ü®y, hy, hy'‚ü© := h.algebraMap_image.symm ‚ñ∏ hx
    subst hy'
    rw [h_isom.nnnorm_map_of_map_zero (map_zero _)]
    exact le_iSup‚ÇÇ (Œ± := ‚Ñù‚â•0‚àû) y hy

variable {A : Type*} [NormedRing A] [StarRing A] [CstarRing A] [CompleteSpace A]
variable [NormedAlgebra ‚ÑÇ A] [StarModule ‚ÑÇ A]

lemma spectrumRestricts_nnreal_iff_nnnorm {a : A} {t : ‚Ñù‚â•0} (ha : IsSelfAdjoint a)
    (ht : ‚Äña‚Äñ‚Çä ‚â§ t) : SpectrumRestricts a ContinuousMap.toNNReal ‚Üî ‚ÄñalgebraMap ‚Ñù A t - a‚Äñ‚Çä ‚â§ t := by
  have : IsSelfAdjoint (algebraMap ‚Ñù A t - a) := IsSelfAdjoint.algebraMap A (.all (t : ‚Ñù)) |>.sub ha
  rw [‚Üê ENNReal.coe_le_coe, ‚Üê IsSelfAdjoint.spectralRadius_eq_nnnorm,
    ‚Üê SpectrumRestricts.spectralRadius_eq (f := Complex.reCLM) (algebraMap_isometry ‚Ñù ‚ÑÇ)] at ht ‚ä¢
  exact spectrumRestricts_nnreal_iff_spectralRadius_le ht
  all_goals
    try apply IsSelfAdjoint.spectrumRestricts
    assumption

lemma SpectrumRestricts.nnreal_add {a b : A} (ha‚ÇÅ : IsSelfAdjoint a)
    (hb‚ÇÅ : IsSelfAdjoint b) (ha‚ÇÇ : SpectrumRestricts a ContinuousMap.toNNReal)
    (hb‚ÇÇ : SpectrumRestricts b ContinuousMap.toNNReal) :
    SpectrumRestricts (a + b) ContinuousMap.toNNReal := by
  rw [spectrumRestricts_nnreal_iff_nnnorm (ha‚ÇÅ.add hb‚ÇÅ) (nnnorm_add_le a b), NNReal.coe_add,
    map_add, add_sub_add_comm]
  refine nnnorm_add_le _ _ |>.trans ?_
  gcongr
  all_goals rw [‚Üê spectrumRestricts_nnreal_iff_nnnorm]
  all_goals first | rfl | assumption


lemma IsSelfAdjoint.sq_spectrumRestricts {a : A} (ha : IsSelfAdjoint a) :
    SpectrumRestricts (a ^ 2) ContinuousMap.toNNReal := by
  rw [spectrumRestricts_nnreal_iff, ‚Üê cfc_id (R := ‚Ñù) a, ‚Üê cfc_pow .., cfc_map_spectrum ..]
  rintro - ‚ü®x, -, rfl‚ü©
  exact sq_nonneg x

open ComplexStarModule

lemma SpectrumRestricts.eq_zero_of_neg {a : A} (ha : IsSelfAdjoint a)
    (ha‚ÇÅ : SpectrumRestricts a ContinuousMap.toNNReal)
    (ha‚ÇÇ : SpectrumRestricts (-a) ContinuousMap.toNNReal) :
    a = 0 := by
  nontriviality A
  rw [spectrumRestricts_nnreal_iff] at ha‚ÇÅ ha‚ÇÇ
  apply eq_zero_of_spectrum_eq_zero (R := ‚Ñù) a
  refine Set.eq_singleton_iff_nonempty_unique_mem.mpr ‚ü®?_, ?_‚ü©
  ¬∑ exact ha.spectrumRestricts.image.symm ‚ñ∏ (spectrum.nonempty a).image _
  ¬∑ simp only [‚Üê spectrum.neg_eq, Set.mem_neg] at ha‚ÇÇ
    peel ha‚ÇÅ with x hx _
    linarith [ha‚ÇÇ (-x) ((neg_neg x).symm ‚ñ∏ hx)]

-- Move Me
lemma SpectrumRestricts.of_spectrum_eq  {R S A : Type*} [CommSemiring R] [CommSemiring S]
    [Ring A] [Algebra S A] [Algebra R A] [Algebra R S] [IsScalarTower R S A] {a b : A} {f : S ‚Üí R}
    (ha : SpectrumRestricts a f) (h : spectrum S a = spectrum S b) :
    SpectrumRestricts b f where
  rightInvOn := h ‚ñ∏ ha.rightInvOn
  left_inv := ha.left_inv

lemma SpectrumRestricts.smul_of_nonneg {A : Type*} [Ring A] [Algebra ‚Ñù A] {a : A}
    (ha : SpectrumRestricts a ContinuousMap.toNNReal) {r : ‚Ñù} (hr : 0 ‚â§ r) :
    SpectrumRestricts (r ‚Ä¢ a) ContinuousMap.toNNReal := by
  rw [spectrumRestricts_nnreal_iff] at ha ‚ä¢
  nontriviality A
  intro x hx
  by_cases hr' : r = 0
  ¬∑ simp [hr'] at hx ‚ä¢
    exact hx.symm.le
  ¬∑ lift r to ‚ÑùÀ£ using IsUnit.mk0 r hr'
    rw [‚Üê Units.smul_def, spectrum.unit_smul_eq_smul, Set.mem_smul_set_iff_inv_smul_mem] at hx
    refine le_of_smul_le_smul_left ?_ (inv_pos.mpr <| lt_of_le_of_ne hr <| ne_comm.mpr hr')
    simpa [Units.smul_def] using ha _ hx

lemma spectrum_star_mul_self_nonneg {b : A} : ‚àÄ x ‚àà spectrum ‚Ñù (star b * b), 0 ‚â§ x := by
  set a := star b * b
  have a_def : a = star b * b := rfl
  let a_neg : A := cfc a (fun x ‚Ü¶ (- ContinuousMap.id ‚Ñù ‚äî 0) x)
  set c := b * a_neg
  have h_eq_a_neg : - (star c * c) = a_neg ^ 3 := by
    simp (config := { zeta := false }) only [c, a_neg, star_mul]
    rw [‚Üê mul_assoc, mul_assoc _ _ b, ‚Üê cfc_star, ‚Üê cfc_id' ‚Ñù (star b * b), a_def, ‚Üê neg_mul]
    rw [‚Üê cfc_mul (star b * b) _ _ (by simp; fun_prop), neg_mul]
    simp only [ContinuousMap.coe_neg, ContinuousMap.coe_id, Pi.sup_apply, Pi.neg_apply,
      star_trivial]
    rw [‚Üê cfc_mul .., ‚Üê cfc_neg .., ‚Üê cfc_pow ..]
    congr
    ext x
    by_cases hx : x ‚â§ 0
    ¬∑ rw [‚Üê neg_nonneg] at hx
      simp [sup_eq_left.mpr hx, pow_succ']
    ¬∑ rw [not_le, ‚Üê neg_neg_iff_pos] at hx
      simp [sup_eq_right.mpr hx.le]
  have h_c_spec‚ÇÄ : SpectrumRestricts (- (star c * c)) (ContinuousMap.toNNReal ¬∑) := by
    simp only [spectrumRestricts_nnreal_iff, h_eq_a_neg]
    rw [‚Üê cfc_pow _ _ _]
    simp only [cfc_map_spectrum (R := ‚Ñù) (star b * b) (fun x => (-ContinuousMap.id ‚Ñù ‚äî 0) x ^ 3)]
    rintro - ‚ü®x, -, rfl‚ü©
    simp
  have c_eq := star_mul_self_add_self_mul_star c
  rw [‚Üê eq_sub_iff_add_eq', sub_eq_add_neg, ‚Üê sq, ‚Üê sq] at c_eq
  have h_c_spec‚ÇÅ : SpectrumRestricts (c * star c) ContinuousMap.toNNReal := by
    rw [c_eq]
    refine SpectrumRestricts.nnreal_add ?_ ?_ ?_ h_c_spec‚ÇÄ
    ¬∑ exact IsSelfAdjoint.smul (by rfl) <| ((‚Ñú c).prop.pow 2).add ((‚Ñë c).prop.pow 2)
    ¬∑ exact (IsSelfAdjoint.star_mul_self c).neg
    ¬∑ rw [nsmul_eq_smul_cast ‚Ñù]
      refine (‚Ñú c).2.sq_spectrumRestricts.nnreal_add ((‚Ñú c).2.pow 2) ((‚Ñë c).2.pow 2)
        (‚Ñë c).2.sq_spectrumRestricts |>.smul_of_nonneg <| by norm_num
  have h_c_spec‚ÇÇ : SpectrumRestricts (star c * c) ContinuousMap.toNNReal := by
    rw [spectrumRestricts_nnreal_iff] at h_c_spec‚ÇÅ ‚ä¢
    intro x hx
    replace hx := Set.subset_diff_union _ {(0 : ‚Ñù)} hx
    rw [spectrum.nonzero_mul_eq_swap_mul, Set.diff_union_self, Set.union_singleton,
      Set.mem_insert_iff] at hx
    obtain (rfl | hx) := hx
    exacts [le_rfl, h_c_spec‚ÇÅ x hx]
  have bar := h_c_spec‚ÇÇ.eq_zero_of_neg (.star_mul_self c) h_c_spec‚ÇÄ
  rw [bar, neg_zero] at h_eq_a_neg
  simp (config := {zeta := false}) only [a_neg] at h_eq_a_neg
  rw [‚Üê cfc_pow .., ‚Üê cfc_zero a (R := ‚Ñù)] at h_eq_a_neg
  have baz := eqOn_of_cfc_eq (star b * b) h_eq_a_neg
  intro x hx
  specialize baz hx
  by_contra! hx'
  rw [‚Üê neg_pos] at hx'
  simp [sup_eq_left.mpr hx'.le] at baz
  exact (pow_pos hx' 3).ne baz

end PrePositive


variable {A : Type*} [NormedRing A] [CompleteSpace A]
variable [PartialOrder A] [StarOrderedRing A] [CstarRing A]
variable [NormedAlgebra ‚ÑÇ A] [StarModule ‚ÑÇ A]

lemma nonneg_iff_isSelfAdjoint_and_spectrumRestricts {a : A} :
    0 ‚â§ a ‚Üî IsSelfAdjoint a ‚àß SpectrumRestricts a ContinuousMap.toNNReal := by
  refine ‚ü®fun ha ‚Ü¶ ?_, ?_‚ü©
  ¬∑ rw [StarOrderedRing.nonneg_iff] at ha
    induction ha using AddSubmonoid.closure_induction' with
    | Hs x hx =>
      obtain ‚ü®b, rfl‚ü© := hx
      simp only
      refine ‚ü®IsSelfAdjoint.star_mul_self b, ?_‚ü©
      rw [spectrumRestricts_nnreal_iff]
      exact spectrum_star_mul_self_nonneg
    | H1 =>
      rw [spectrumRestricts_nnreal_iff]
      nontriviality A
      simp
    | Hmul x _ y _ hx hy =>
      exact ‚ü®hx.1.add hy.1, hx.2.nnreal_add hx.1 hy.1 hy.2‚ü©
  ¬∑ rintro ‚ü®ha‚ÇÅ, ha‚ÇÇ‚ü©
    let s := cfc a Real.sqrt
    have : a = star s * s := by
      rw [‚Üê cfc_id a (R := ‚Ñù), ‚Üê cfc_star a (R := ‚Ñù), ‚Üê cfc_mul ..]
      apply cfc_congr a
      rw [spectrumRestricts_nnreal_iff] at ha‚ÇÇ
      peel ha‚ÇÇ with x hx _
      simp [Real.mul_self_sqrt this]
    exact this ‚ñ∏ star_mul_self_nonneg s

open NNReal
instance : ContinuousFunctionalCalculus ‚Ñù‚â•0 (fun x : A ‚Ü¶ 0 ‚â§ x) :=
  SpectrumRestricts.cfc (q := IsSelfAdjoint) ContinuousMap.toNNReal
    isometry_subtype_coe (fun _ ‚Ü¶ nonneg_iff_isSelfAdjoint_and_spectrumRestricts)
    (fun _ _ ‚Ü¶ inferInstance)

end
